name: D++ CI
on: [push, pull_request]

jobs:
  linux:
    name: Linux ${{matrix.cfg.arch}} (${{matrix.cfg.cpp-version}})
    runs-on: ${{matrix.cfg.os}}
    strategy:
      fail-fast: false # Don't fail everything if one fails. We want to test each OS/Compiler individually
      matrix:
        cfg:
          - { arch: 'amd64', os: ubuntu-20.04, cpp-version: g++-8 }
          - { arch: 'amd64', os: ubuntu-20.04, cpp-version: g++-9 }

    steps:
      - name: Checkout D++
        uses: actions/checkout@v2

      - name: Install apt packages
        run: sudo dpkg --add-architecture i386 && sudo apt update && sudo apt install  ${{ matrix.cfg.cpp-version }}:${{ matrix.cfg.arch }} ninja-build libsodium-dev:${{ matrix.cfg.arch }} libopus-dev:${{ matrix.cfg.arch }} zlib1g-dev:${{ matrix.cfg.arch }}

      - name: Generate CMake
        run: mkdir build && cd build && cmake -G Ninja ..
        env:
          CXX: ${{matrix.cfg.cpp-version}}

      - name: Build Project
        run: cd build && ninja

      - name: Package distributable
        if: ${{ matrix.cfg.cpp-version == 'g++-8' }}
        run: cd build && cpack

      - name: Upload Binary
        if: ${{ matrix.cfg.cpp-version == 'g++-8' }}
        uses: actions/upload-artifact@v2
        with:
          name: "libdpp - Debian Package ${{matrix.cfg.arch}}"
          path: '${{github.workspace}}/build/*.deb'

  macos:
    name: macOS x64
    runs-on: macos-latest
    steps:
      - name: Checkout D++
        uses: actions/checkout@v2

      - name: Install homebrew packages
        run: brew install cmake ninja libsodium opus

      - name: Generate CMake
        run: mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Release -G Ninja ..

      - name: Build Project
        run: cd build && ninja

  windows: # Windows x64 and x86 build matrix
    strategy:
      fail-fast: false # Don't cancel other matrix jobs if one fails
      matrix:
        cfg:
        - { name: x64,  arch: x64, config: Release }
        - { name: x64,  arch: x64, config: Debug }
        - { name: x86,  arch: x86, config: Release }
        - { name: x86,  arch: x86, config: Debug }

    name: "Windows ${{matrix.cfg.name}}-${{matrix.cfg.config}}"
    runs-on: windows-2019
    steps:
      - name: Checkout D++
        uses: actions/checkout@v2
        with:
          path: main

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Install chocolatey packages (x64)
        run: choco install ninja -y

      - name: Generate CMake (x64)
        if: ${{ matrix.cfg.arch == 'x64' }}
        run: mkdir main/build && cd main/build && cmake -G "Visual Studio 16 2019" ..

      - name: Generate CMake (x86)
        if: ${{ matrix.cfg.arch == 'x86' }}
        run: mkdir main/build && cd main/build && cmake -DCMAKE_TOOLCHAIN_FILE="cmake\Win32Toolchain.cmake" -G "Visual Studio 16 2019" -A Win32 -T host=x86 ..

      - name: Build Project
        run: cmake --build main/build --target dpp --config ${{matrix.cfg.config}}

      - name: Move debug files for packaging
        if: ${{ matrix.cfg.config == 'Debug' }}
        run: xcopy /s/q main\build\Debug main\build\Release\

      - name: Package distributable
        run: cd main/build && cpack

      - name: Upload Binary
        uses: actions/upload-artifact@v2
        with:
          name: "libdpp - Windows ${{matrix.cfg.name}}-${{matrix.cfg.config}}"
          path: '${{github.workspace}}/main/build/*.zip'

  cross-compiles:
    strategy:
      fail-fast: false
      matrix:
        cfg:
          - {name: "ARM64", cmake-options: -DCMAKE_TOOLCHAIN_FILE=cmake/ARM64ToolChain.cmake}
          - {name: "ARMv7 HF", cmake-options: -DCMAKE_TOOLCHAIN_FILE=cmake/ARMv7ToolChain.cmake}
          - {name: "Linux x86", cmake-options: -DCMAKE_TOOLCHAIN_FILE=cmake/LINUXx86ToolChain.cmake}
          - {name: "ARMv6", cmake-options: -DCMAKE_TOOLCHAIN_FILE=cmake/ARMv6ToolChain.cmake}

    name: ${{matrix.cfg.name}}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout D++
        uses: actions/checkout@v2

      - name: Install Packages
        run: sudo apt update && sudo apt install cmake ninja-build

      - name: Generate CMakeFiles
        run: mkdir build && cd build && sudo cmake ${{matrix.cfg.cmake-options}} -DCMAKE_BUILD_TYPE=Release -G Ninja ..

      - name: Compile Source
        run: cd build && sudo ninja

      - name: Package Distributable
        run: cd build && cpack

      - name: Upload Binaries
        uses: actions/upload-artifact@v2
        with:
          name: "libdpp - Debian Package ${{matrix.cfg.name}}"
          path: "${{github.workspace}}/build/*.deb"

